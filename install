#!/usr/bin/env bash
# Celona Desktop Environment installer for Arch/CachyOS (Niri-based)
# This script automates the steps from installation.txt
# It shows a persistent bottom-line progress bar throughout the run.
# big thanks to bahamas10 for the awesome progress bar

set -Eeuo pipefail

# Make TUIs less invasive: disable pagers and keep colors sane
export PAGER=cat
export PARU_PAGER=cat
export SYSTEMD_PAGER=cat
export MANPAGER=cat
export GIT_PAGER=cat
export LESS=-R

# Clear the terminal before showing anything
printf '\033[2J\033[H'

# --- UI helpers: persistent bottom progress bar ---
# Configure header: 7 lines of ASCII + 1 blank line = 8 top lines reserved
export PB_TOP_LINES=8
export PB_HEADER_FILE="scripts/ascii.txt"

# If scripts/progress-bar exists, source it for customization; otherwise use built-in.
if [[ -f "scripts/progress-bar" ]]; then
  # shellcheck disable=SC1091
  source "scripts/progress-bar"
  # Initialize terminal margins if the sourced script provides an init function
  if declare -F progress_init >/dev/null 2>&1; then
    progress_init
  fi
else
  # Built-in minimal progress bar implementation pinned to the last terminal line
  _pb_cols() { tput cols 2>/dev/null || echo 80; }
  _pb_lines() { tput lines 2>/dev/null || echo 24; }
  _pb_lastline() { local l; l=$((_pb_lines - 1)); (( l < 0 )) && l=0; echo "$l"; }
  _pb_trunc() { # trunc to width
    local s="$1" w="$2"; (( ${#s} > w )) && s="${s:0:w}"; printf '%s' "$s";
  }
  _pb_init() {
    # Reset scroll region full
    printf '\0337'
    printf '\033[1;%dr' "$(_pb_lines)"
    # Draw header if present (colored cyan)
    local top=${PB_TOP_LINES:-0}
    local header=${PB_HEADER_FILE:-}
    if [[ -n "$header" && -f "$header" && $top -gt 0 ]]; then
      printf '\033[1;1H'
      # Print first (top-1) lines, then one blank line
      printf '\033[36m'
      sed -n "1,$((top-1))p" "$header"
      # Ensure exactly (top-1) lines printed (pad if needed)
      local printed; printed=$(sed -n "1,$((top-1))p" "$header" | wc -l)
      local fill=$(( top - 1 - printed ))
      if (( fill > 0 )); then printf '%*s\n' "$fill" ''; fi
      printf '\033[0m'
      printf '\n'
    elif (( top > 0 )); then
      printf '\033[1;1H'
      printf '%*s\n' "$top" ''
    fi
    # Set scroll region between top+1 and last-2 to keep a fixed blank separator above the bar
    local start=$(( top + 1 ))
    local end=$(( $(_pb_lines) - 2 ))
    (( start < 1 )) && start=1
    (( end < start )) && end=$start
    printf '\033[%d;%dr' "$start" "$end"
    # Ensure the separator line (just above the bottom bar) is blank
    local sep=$(( $(_pb_lines) - 1 ))
    (( sep < 1 )) && sep=1
    printf '\033[%d;1H\033[K' "$sep"
    printf '\0338'
  }
  progress_render() {
    local current="$1" total="$2" msg="$3"
    local cols=$(_pb_cols); local last=$(_pb_lastline)
    local pct=0
    if (( total > 0 )); then pct=$(( current * 100 / total )); fi
    local barw=$(( cols - 20 ))
    (( barw < 10 )) && barw=10
    local pac_pos=$(( barw * pct / 100 )); (( pac_pos < 0 )) && pac_pos=0; (( pac_pos > barw )) && pac_pos=$barw
    local full_done=0; if (( pac_pos >= barw )); then full_done=1; fi
    # Pacman character toggles c/C once per second based on wall-clock time
    local _now; _now=$(date +%s 2>/dev/null || printf '0')
    local pacman; if (( _now % 2 == 0 )); then pacman='c'; else pacman='C'; fi
    local right_space=0; if (( full_done == 0 )); then right_space=$(( barw - pac_pos - 1 )); (( right_space < 0 )) && right_space=0; fi
    local tail=""; if (( right_space > 0 )); then tail=$(printf '%*s' "$right_space" '' | tr ' ' 'o'); fi
    # Build bar: eaten '-' (gray), pacman at frontier (unless full), remaining 'o' (cyan, spaced)
    local bar='['
    bar+=$'\033[90m'
    bar+="$(printf '%*s' "$pac_pos" '' | tr ' ' '-')"
    bar+=$'\033[0m'
    if (( full_done == 0 )); then
      # Pacman at the frontier (color uppercase C in red, lowercase c in yellow)
      if [[ $pacman == 'C' ]]; then
        bar+=$'\033[31mC\033[0m'
      else
        bar+=$'\033[33mc\033[0m'
      fi
      # build spaced cyan tail to fit right_space columns
      bar+=$'\033[36m'
      if (( right_space > 0 )); then
        local tb=""
        for ((i = 0; i < right_space; i++)); do
          if (( i % 2 == 0 )); then tb+='o'; else tb+=' '; fi
        done
        bar+=$tb
      fi
      bar+=$'\033[0m'
    fi
    bar+=']'
    local left="$bar $(printf '%3d' "$pct")%"
    local right=" $msg"
    local line="$left$right"
    line=$(_pb_trunc "$line" "$cols")
    # Save cursor position, move to last line col 0, print, clear to end, restore cursor
    printf '\0337'          # ESC 7 save cursor
    printf '\033[%d;0H' "$last" # move cursor
    printf '%s' "$line"
    printf '\033[K'         # clear to end of line
    printf '\0338'          # ESC 8 restore cursor
  }
  progress_done() {
    # Leave a final "100% done" line and then print a newline below it
    progress_render "$1" "$2" "Done"
    printf '\n'
  }
  # Initialize header/scroll region for built-in mode
  _pb_init
fi

# Small helper to refresh UI after commands that may reset TTY
ui_refresh() {
  if declare -F progress_refresh >/dev/null 2>&1; then
    progress_refresh
  elif declare -F _pb_init >/dev/null 2>&1; then
    _pb_init
  fi
}

# Temporarily release the bottom progress bar (full scroll region) for TUI tools
pb_release() {
  if declare -F progress_release >/dev/null 2>&1; then
    # External progress-bar shim provided by scripts/progress-bar
    progress_release
    return
  fi
  if declare -F _pb_lines >/dev/null 2>&1; then
    # Built-in fallback: set scroll region to full screen again
    printf '\0337'
    printf '\033[1;%dr' "$(_pb_lines)"
    printf '\0338'
  fi
}

# Restore the bar (re-initialize scroll region and re-render)
pb_restore() {
  if declare -F progress_restore >/dev/null 2>&1; then
    progress_restore
  else
    ui_refresh
  fi
}

# Ensure a snapper config for /home exists (common CachyOS fresh install only has root)
snapper_ensure_home_config() {
  if ! command -v snapper >/dev/null 2>&1; then
    echo "snapper not found; skipping home config setup"; return 0; fi
  if [[ -f /etc/snapper/configs/home ]]; then
    echo "snapper home config already exists"; return 0; fi
  if ! findmnt -no FSTYPE /home 2>/dev/null | grep -qi '^btrfs$'; then
    echo "/home is not on Btrfs; skipping home config"; return 0; fi
  if [[ ! -d /home ]]; then
    echo "/home directory not found; skipping home config"; return 0; fi
  echo "Creating snapper home config for /home (subvolume @home)";
  sudo snapper -c home create-config /home || {
    echo "snapper create-config for home failed (may already exist)."; return 0; }
  # Allow the primary user to access home snapshots
  local target_user
  target_user=${SUDO_USER:-$USER}
  if [[ -n "$target_user" ]]; then
    sudo sed -i 's/^#\?\s*ALLOW_USERS=.*/ALLOW_USERS=\"'"$target_user"'\"/' /etc/snapper/configs/home || \
      echo 'ALLOW_USERS="'$target_user'"' | sudo tee -a /etc/snapper/configs/home >/dev/null
  fi
  # Ensure /home/.snapshots is accessible for browsing (prefer ACL without changing ownership)
  if [[ -d /home/.snapshots ]]; then
    sudo chown root:root /home/.snapshots 2>/dev/null || true
    sudo chmod 755 /home/.snapshots 2>/dev/null || true
    if command -v setfacl >/dev/null 2>&1 && [[ -n "$target_user" ]]; then
      sudo setfacl -m u:"$target_user":rx /home/.snapshots 2>/dev/null || true
    fi
  fi
  echo "snapper home config created."
}

# --- Confirmation prompt with animated 0% bar ---
# Move cursor to the first scrollable line (just below header + blank line)
printf '\033[%d;1H' $(( PB_TOP_LINES + 1 ))
# Title (cyan)
printf '\033[36mCelona Desktop Environment - Installer.\033[0m\n'
# Security notice (plain)
echo "Security notice: Never run thirdâ€‘party install scripts blindly. Always review the code and understand the changes it will make to your system before executing it."
echo
echo "Ready to install now? Type 'yes' to proceed or 'no' to quit."
# Start a lightweight background animator to keep the 0% bar blinking
(
  while true; do
    ui_refresh
    progress_render 0 100 "Ready to install now?"
    sleep 1
  done
) &
CONFIRM_PID=$!
while true; do
  read -r -p "> " reply || reply=
  case "${reply,,}" in
    y|ye|yes)
      kill "$CONFIRM_PID" 2>/dev/null || true; wait "$CONFIRM_PID" 2>/dev/null || true
      break;;
    n|no)
      kill "$CONFIRM_PID" 2>/dev/null || true; wait "$CONFIRM_PID" 2>/dev/null || true
      echo "Installation cancelled by user."
      progress_done 0 100
      exit 0;;
    *)
      echo "Please answer 'yes' or 'no'.";;
  esac
done

# --- Privilege checks and environment ---
if ! command -v sudo >/dev/null 2>&1; then
  echo "This installer requires sudo. Please install and configure sudo first." >&2
  exit 1
fi

if ! command -v pacman >/dev/null 2>&1; then
  echo "This installer targets Arch/CachyOS. pacman not found." >&2
  exit 1
fi

# --- Planned steps ---
# Keep this in sync with run_step calls
TOTAL_STEPS=30
STEP=0
start_time=$(date +%s)

# --- Dependencies (data-driven: YAML > shell > built-in) ---
# YAML file format: install-dependencies.yaml
# packages:
#   pacman:
#     - pkg1
#   aur:
#     - pkgA

_parse_yaml_list() {
  # Usage: _parse_yaml_list <file> <listname>   where listname in {pacman, aur}
  local file="$1" listname="$2"
  awk -v list="^\\s*"listname":" '
    BEGIN{in_packages=0; in_list=0}
    /^packages:/ {in_packages=1; next}
    in_packages && /^[^[:space:]]/ {exit}
    in_packages && $0 ~ list {in_list=1; next}
    in_packages && /^[[:space:]]*[A-Za-z0-9_.-]+:/ {in_list=0}
    in_list && /^[[:space:]]*-[[:space:]]*/ {
      s=$0
      sub(/^[[:space:]]*-[[:space:]]*/, "", s)
      gsub(/^"|"$/, "", s)
      gsub(/^'\''|'\''$/, "", s)
      if (length(s) > 0) print s
    }
  ' "$file" 2>/dev/null || true
}

DEP_YAML="./install-dependencies.yaml"
DEP_SH="./install-dependencies.sh"

if [[ -f "$DEP_YAML" ]]; then
  mapfile -t _pac < <(_parse_yaml_list "$DEP_YAML" pacman) || true
  mapfile -t _aur < <(_parse_yaml_list "$DEP_YAML" aur) || true
  if (( ${#_pac[@]} > 0 )); then PACMAN_PACKAGES=("${_pac[@]}"); fi
  if (( ${#_aur[@]} > 0 )); then AUR_PACKAGES=("${_aur[@]}"); fi
elif [[ -f "$DEP_SH" ]]; then
  # shellcheck disable=SC1090
  source "$DEP_SH"
fi
# Ensure arrays are defined to avoid set -u errors when checking lengths
declare -p PACMAN_PACKAGES >/dev/null 2>&1 || PACMAN_PACKAGES=()
declare -p AUR_PACKAGES >/dev/null 2>&1 || AUR_PACKAGES=()
# Fallback defaults if arrays are empty or undefined
if (( ${#PACMAN_PACKAGES[@]} == 0 )); then
  PACMAN_PACKAGES=(
    base-devel micro fuzzel git zen-browser quickshell nautilus sddm ghostty gvfs udisks2 polkit polkit-gnome
    cliphist cava xwayland-satellite playerctl hyprlock haruna htop nvtop xdg-desktop-portal-gnome gnome-keyring
    swww nm-connection-editor network-manager-applet swaync ttf-jetbrains-mono-nerd gnome-text-editor
  )
fi
if (( ${#AUR_PACKAGES[@]} == 0 )); then
  AUR_PACKAGES=(
    sddm-silent-theme bibata-cursor-theme-bin nwg-look kora-icon-theme mpvpaper matugen tmatrix
  )
fi

run_step() {
  local title="$1"; shift
  # Re-apply UI in case prior step reset terminal or scroll region
  ui_refresh
  STEP=$(( STEP + 1 ))
  progress_render "$STEP" "$TOTAL_STEPS" "$title"
  "$@"
  local rc=$?
  if (( rc == 0 )); then
    printf "\033[32m[OK]\033[0m %s\n" "$title"
  else
    printf "\033[31m[FAIL]\033[0m %s (rc=%d)\n" "$title" "$rc"
  fi
  return $rc
}

# Variant that releases the bar before running the command (for TUIs like paru)
run_step_release() {
  local title="$1"; shift
  ui_refresh
  STEP=$(( STEP + 1 ))
  progress_render "$STEP" "$TOTAL_STEPS" "$title"
  pb_release
  "$@"
  local rc=$?
  pb_restore
  # Extra safety: re-draw the bar after tools that may alter the screen/scroll region
  ui_refresh
  progress_render "$STEP" "$TOTAL_STEPS" "$title"
  if (( rc == 0 )); then
    echo "[OK] $title"
  else
    echo "[FAIL] $title (rc=$rc)"
  fi
  return $rc
}

# --- Helper functions ---
ensure_dir() { install -d -m 755 "$1"; }
write_file() { # write_file path content
  local path="$1"; shift
  ensure_dir "$(dirname "$path")"
  printf '%s' "$*" >"$path"
}
append_file() { local path="$1"; shift; ensure_dir "$(dirname "$path")"; printf '%s\n' "$*" >>"$path"; }
sed_uncomment() { local pattern="$1" file="$2"; sudo sed -i "s/^#\s*\(${pattern}\)/\1/" "$file" || true; }
replace_json_value() { # naive replacer for micro settings.json theme value
  local file="$1" key="$2" newval="$3"
  if [[ -f "$file" ]]; then
    sed -i "s/\("$key"\s*:\s*\)\"[^\"]*\"/\1\"$newval\"/" "$file" || true
  else
    ensure_dir "$(dirname "$file")"
    printf '{\n  "%s": "%s"\n}\n' "$key" "$newval" >"$file"
  fi
}

# Snapper helpers (persist pre IDs for root and home)
PRE_ROOT_ID=""; PRE_HOME_ID=""
snapper_pre() {
  if ! command -v snapper >/dev/null 2>&1; then
    echo "snapper not found; skipping pre snapshots"; return 0; fi
  if [[ -f /etc/snapper/configs/root ]]; then
    PRE_ROOT_ID=$(sudo snapper -c root create --type pre --print-number --description "Celona install pre (root)" 2> >(err=$(cat); typeset -p err >/dev/null) ) || true
    if [[ -n "${PRE_ROOT_ID}" ]]; then
      sudo snapper -c root modify --cleanup-algorithms "" "$PRE_ROOT_ID" 2>/dev/null || true
      echo "Root pre snapshot (cleanup disabled): ${PRE_ROOT_ID}"
    else
      echo "Failed to create root pre snapshot" >&2
      if [[ -n "${err:-}" ]]; then
        echo "snapper(root) error: $err" >&2
      fi
      echo "snapper root config exists? $(sudo test -f /etc/snapper/configs/root && echo yes || echo no)"
      echo "Recent root snapshots:"; sudo snapper -c root list | tail -n 5 || true
    fi
  else
    echo "snapper root config not found; skipping root pre snapshot"
  fi
  if [[ -f /etc/snapper/configs/home ]]; then
    PRE_HOME_ID=$(sudo snapper -c home create --type pre --print-number --description "Celona install pre (home)" 2> >(errh=$(cat); typeset -p errh >/dev/null) ) || true
    if [[ -n "${PRE_HOME_ID}" ]]; then
      sudo snapper -c home modify --cleanup-algorithms "" "$PRE_HOME_ID" 2>/dev/null || true
      echo "Home pre snapshot (cleanup disabled): ${PRE_HOME_ID}"
    else
      echo "Failed to create home pre snapshot" >&2
      if [[ -n "${errh:-}" ]]; then
        echo "snapper(home) error: $errh" >&2
      fi
      echo "snapper home config exists? $(sudo test -f /etc/snapper/configs/home && echo yes || echo no)"
      echo "Recent home snapshots:"; sudo snapper -c home list | tail -n 5 || true
    fi
  else
    echo "snapper home config not found; skipping home pre snapshot"
  fi
}

snapper_post() {
  if ! command -v snapper >/dev/null 2>&1; then
    echo "snapper not found; skipping post snapshots"; return 0; fi
  if [[ -f /etc/snapper/configs/root && -n "${PRE_ROOT_ID}" ]]; then
    local POST_ROOT_ID errp
    POST_ROOT_ID=$(sudo snapper -c root create --type post --print-number --pre-number "$PRE_ROOT_ID" --description "Celona install post (root)" 2> >(errp=$(cat); typeset -p errp >/dev/null) ) || true
    if [[ -n "${POST_ROOT_ID}" ]]; then
      sudo snapper -c root modify --cleanup-algorithms "" "$POST_ROOT_ID" 2>/dev/null || true
      echo "Created root post snapshot $POST_ROOT_ID for pre $PRE_ROOT_ID (cleanup disabled)"
    else
      echo "Failed to create root post snapshot for pre $PRE_ROOT_ID" >&2
      if [[ -n "${errp:-}" ]]; then
        echo "snapper(root post) error: $errp" >&2
      fi
      echo "Recent root snapshots:"; sudo snapper -c root list | tail -n 5 || true
    fi
  else
    echo "No root pre snapshot/context; skipping root post snapshot"
  fi
  if [[ -f /etc/snapper/configs/home && -n "${PRE_HOME_ID}" ]]; then
    local POST_HOME_ID errph
    POST_HOME_ID=$(sudo snapper -c home create --type post --print-number --pre-number "$PRE_HOME_ID" --description "Celona install post (home)" 2> >(errph=$(cat); typeset -p errph >/dev/null) ) || true
    if [[ -n "${POST_HOME_ID}" ]]; then
      sudo snapper -c home modify --cleanup-algorithms "" "$POST_HOME_ID" 2>/dev/null || true
      echo "Created home post snapshot $POST_HOME_ID for pre $PRE_HOME_ID (cleanup disabled)"
    else
      echo "Failed to create home post snapshot for pre $PRE_HOME_ID" >&2
      if [[ -n "${errph:-}" ]]; then
        echo "snapper(home post) error: $errph" >&2
      fi
      echo "Recent home snapshots:"; sudo snapper -c home list | tail -n 5 || true
    fi
  else
    echo "No home pre snapshot/context; skipping home post snapshot"
  fi
}

# --- Steps begin ---
run_step "Ensure snapper home config (@home)" snapper_ensure_home_config
run_step_release "Create pre snapshots (snapper)" snapper_pre

run_step "Update package databases" sudo pacman -Syu --noconfirm --needed

run_step "Refresh mirrors" bash -c '
  if command -v mirror >/dev/null 2>&1; then
    mirror
  else
    echo "mirror command not found; skipping mirror refresh"
  fi
'

run_step "Install base packages" sudo pacman -S --needed --noconfirm "${PACMAN_PACKAGES[@]}"

run_step "Enable udisks2" sudo systemctl enable --now udisks2

run_step "Create user systemd dir" mkdir -p "$HOME/.config/systemd/user"

run_step "Install Polkit user service" bash -c '
  install -d -m 755 "$HOME/.config/systemd/user"
  cat > "$HOME/.config/systemd/user/polkit-agent.service" <<'EOF'
[Unit]
Description=Polkit authentication agent
PartOf=niri.service
After=graphical-session.target

[Service]
ExecStart=/usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1
Restart=on-failure

[Install]
WantedBy=niri.service
EOF
'
run_step "Customize SDDM Silent theme (Celona)" bash -c '
  src_base="$HOME/.config/quickshell/Celona/.sddm_conf"
  theme_root="/usr/share/sddm/themes/silent"
  cfg_dir="$theme_root/configs"
  bg_dir="$theme_root/backgrounds"

  # Ensure target dirs exist (sudo)
  sudo install -d -m 755 "$cfg_dir" "$bg_dir"

  # Copy celona.conf into configs
  if [[ -f "$src_base/celona.conf" ]]; then
    sudo cp -f "$src_base/celona.conf" "$cfg_dir/"
    echo "Installed celona.conf to $cfg_dir"
  else
    echo "Warning: $src_base/celona.conf not found"
  fi

  # Prefer replacing metadata.desktop if provided; otherwise append ConfigFile line
  if [[ -f "$src_base/metadata.desktop" ]]; then
    sudo cp -f "$src_base/metadata.desktop" "$theme_root/metadata.desktop"
    echo "Replaced metadata.desktop with repo version"
  else
    if [[ -f "$theme_root/metadata.desktop" ]]; then
      if ! grep -Eq '^\s*ConfigFile\s*=\s*configs/celona.conf\s*$' "$theme_root/metadata.desktop"; then
        echo "Appending ConfigFile entry to metadata.desktop"
        printf '\nConfigFile=configs/celona.conf\n' | sudo tee -a "$theme_root/metadata.desktop" >/dev/null
      fi
    else
      echo "Warning: $theme_root/metadata.desktop not found and no repo override provided"
    fi
  fi

  # Copy sample wallpapers (flat) from repo to system theme backgrounds
  shopt -s nullglob dotglob
  src_wp_sys="$HOME/.config/quickshell/Celona/wallpapers/3440x1440"
  if [[ -d "$src_wp_sys" ]]; then
    copied=0
    for f in "$src_wp_sys"/*; do
      if [[ -f "$f" ]]; then
        sudo cp -f "$f" "$bg_dir/"
        copied=$(( copied + 1 ))
      fi
    done
    echo "Copied $copied background files to $bg_dir from $src_wp_sys"
  else
    echo "No wallpapers found at $src_wp_sys; skipping"
  fi
'

run_step "Enable Polkit user service" bash -c '
  systemctl --user daemon-reload
  systemctl --user enable --now polkit-agent.service
  systemctl --user add-wants niri.service polkit-agent.service || true
'

run_step "Enable SDDM" sudo systemctl enable sddm.service

run_step "Configure portals preference" sudo bash -c '
  cat > "/usr/share/xdg-desktop-portal/niri-portals.conf" <<'EOF'
[preferred]
default=gnome;gtk;
org.freedesktop.impl.portal.Access=gnome-shell;gtk;
org.freedesktop.impl.portal.Secret=gnome-keyring;
org.freedesktop.impl.portal.ScreenCast=gnome;
org.freedesktop.impl.portal.FileChooser=gnome;
org.freedesktop.impl.portal.Notification=gnome;gtk;
EOF
'

run_step "Restart portal services (user)" bash -c '
  systemctl --user restart xdg-desktop-portal.service xdg-desktop-portal-gtk.service xdg-desktop-portal-gnome.service || true
'

run_step_release "Install paru (AUR helper)" bash -c '
  tmpd=$(mktemp -d)
  trap "rm -rf \"$tmpd\"" EXIT
  git clone https://aur.archlinux.org/paru.git "$tmpd/paru"
  cd "$tmpd/paru"
  makepkg -si --noconfirm
'

run_step "Configure paru BottomUP" sudo bash -c '
  if [[ -f /etc/paru.conf ]]; then sed -i "s/^#\s*BottomUp/BottomUp/" /etc/paru.conf; fi
'

run_step "Set micro theme to simple" replace_json_value "$HOME/.config/micro/settings.json" "colorscheme" "simple"

run_step_release "Install AUR packages" env PAGER=cat PARU_PAGER=cat paru --noconfirm -S "${AUR_PACKAGES[@]}"

run_step "Clone Celona config" bash -c '
  mkdir -p "$HOME/.config/quickshell"
  if [[ ! -d "$HOME/.config/quickshell/Celona/.git" ]]; then
    git clone https://github.com/myinqi/Celona.git "$HOME/.config/quickshell/Celona"
  else
    git -C "$HOME/.config/quickshell/Celona" pull --ff-only || true
  fi
'

run_step "Install hyprgreetr (build)" bash -c '
  tmpd=$(mktemp -d)
  trap "rm -rf \"$tmpd\"" EXIT
  git clone https://github.com/myinqi/hyprgreetr.git "$tmpd/hyprgreetr"
  cd "$tmpd/hyprgreetr"
  cargo build --release
  cargo install --path .
  # Seed example images from repo assets into the user config (overwrite if present)
  if [[ -d "$tmpd/hyprgreetr/assets" ]]; then
    mkdir -p "$HOME/.config/hyprgreetr/pngs"
    (
      shopt -s dotglob nullglob
      cp -af "$tmpd/hyprgreetr/assets"/* "$HOME/.config/hyprgreetr/pngs/" 2>/dev/null || true
    )
    echo "Copied example images to $HOME/.config/hyprgreetr/pngs"
  else
    echo "No wallpapers found at $tmpd/hyprgreetr/assets; skipping"
  fi
'

run_step "Add Cargo bin to fish PATH" bash -c '
  if command -v fish >/dev/null 2>&1; then
    mkdir -p "$HOME/.config/fish"
    if ! grep -q "fish_add_path ~/.cargo/bin" "$HOME/.config/fish/config.fish" 2>/dev/null; then
      printf "%s\n" "fish_add_path ~/.cargo/bin" >> "$HOME/.config/fish/config.fish"
    fi
  fi
'

run_step "Set fish greeting to hyprgreetr" sudo bash -c '
  tgt="/usr/share/cachyos-fish-config/cachyos-config.fish"
  if [[ -f "$tgt" ]]; then
    tmp=$(mktemp)
    awk '
      BEGIN{skip=0; inserted=0}
      {
        # Remove any existing fish_greeting function block
        if ($0 ~ /^\s*function\s+fish_greeting\b/) { skip=1; next }
        if (skip==1) {
          if ($0 ~ /^\s*end\s*$/) { skip=0; next } else { next }
        }
        print $0
        # Insert our function right after the "## Set values" line
        if (inserted==0 && $0 ~ /^\s*## Set values\s*$/) {
          print "## Run hyprgreetr as welcome message ##"
          print "function fish_greeting"
          print "    hyprgreetr"
          print "end"
          print ""
          inserted=1
        }
      }
      END{
        if (inserted==0) {
          print ""
          print "## Set values"
          print "## Run hyprgreetr as welcome message ##"
          print "function fish_greeting"
          print "    hyprgreetr"
          print "end"
          print ""
        }
      }
    ' "$tgt" > "$tmp" && install -m 644 "$tmp" "$tgt" && rm -f "$tmp"
  else
    echo "Warning: $tgt not found; skipping fish greeting setup"
  fi
'

run_step "Set GNOME icon and cursor" bash -c '
  gsettings set org.gnome.desktop.interface icon-theme "kora-pgrey" || true
  gsettings set org.gnome.desktop.interface cursor-theme "Bibata-Modern-Ice" || true
  gsettings set org.gnome.desktop.interface cursor-size 28 || true
'

run_step "Configure SDDM" sudo bash -c '
  cat > "/etc/sddm.conf" <<'EOF'
[General]
InputMethod=qtvirtualkeyboard
GreeterEnvironment=QML2_IMPORT_PATH=/usr/share/sddm/themes/silent/components/,QT_IM_MODULE=qtvirtualkeyboard

[Theme]
Current=silent
EOF
'

run_step "Ensure swww is available" bash -c 'command -v swww >/dev/null 2>&1 || echo "swww not found (wallpaper tool)."'

run_step "Ensure xdg-desktop-portal-gnome running" bash -c 'systemctl --user is-active xdg-desktop-portal-gnome.service >/dev/null 2>&1 || true'

run_step "Create Matugen config dir" mkdir -p "$HOME/.config/matugen"

run_step "Deploy Celona configs to ~/.config" bash -c '
  src="$HOME/.config/quickshell/Celona/.config"
  dst="$HOME/.config"
  if [[ -d "$src" ]]; then
    mkdir -p "$dst"
    (
      shopt -s dotglob nullglob
      # copy content of src into dst, overwrite existing, preserve attrs
      cp -a "$src"/* "$dst"/
    )
  else
    echo "No Celona .config directory found at $src, skipping copy"
  fi
'

run_step "Install wallpapers to Pictures/Celona/3440x1440" bash -c '
  # Determine localized Pictures directory
  picdir=""
  if command -v xdg-user-dir >/dev/null 2>&1; then
    picdir_tmp=$(xdg-user-dir PICTURES 2>/dev/null || true)
    if [[ -n "$picdir_tmp" ]]; then picdir="$picdir_tmp"; fi
  fi
  # Fallbacks: ~/Pictures then ~/Bilder
  if [[ -z "$picdir" ]]; then
    if [[ -d "$HOME/Pictures" || ! -d "$HOME/Bilder" ]]; then
      picdir="$HOME/Pictures"
    else
      picdir="$HOME/Bilder"
    fi
  fi
  # Ensure target dir exists
  dest="$picdir/Celona/3440x1440"
  mkdir -p "$dest"
  # Source repo wallpapers path
  src_wp="$HOME/.config/quickshell/Celona/wallpapers/3440x1440"
  if [[ -d "$src_wp" ]]; then
    (
      shopt -s dotglob nullglob
      cp -a "$src_wp"/* "$dest"/ 2>/dev/null || true
    )
    echo "Wallpapers installed to: $dest"
  else
    echo "No wallpapers found at $src_wp; skipping"
  fi
'

run_step_release "Create post snapshots (snapper)" snapper_post

run_step_release "Summary and post-install notes" bash -c '
  echo
  echo "Installation completed. Review the output above for any warnings."
  echo
  printf "\033[31mPost-install guide:\033[0m\n"
  echo " 1) Niri configuration"
  echo "    Edit: ~/.config/niri/config.kdl"
  echo "     - Line 16: set your preferred keyboard layouts (e.g. \"us\", \"de\")."
  echo "     - Line 82: set your display mode and refresh rate (e.g. \"1920x1080@60.000\" or \"3440x1440@165.030\")."
  echo "     - Line 128: set your maximum horizontal resolution minus a small margin (e.g. -20 pixels)."
  echo
  echo " 2) Final touches"
  echo "    - Open the Celona session (gear icon) and set your wallpaper."
  echo "    - Optional: In your home/pictures folder are some animated and static wallpapers to choose from if they fit your screen resolution."  
  echo "    - Optional: Enable the Keybindings module to view important shortcuts."
  echo "    - Optional: Set a custom user Icon for SDDM. run the script ~/.config/quickshell/Celona/scripts/change_avatar.sh $USER /path/to/image.png"
  printf "\033[31m    - Reboot to start SDDM and Niri: sudo reboot\033[0m\n"
'

progress_done "$STEP" "$TOTAL_STEPS"
# Reset scroll region to full screen so the last output stays visible
if declare -F _pb_lines >/dev/null 2>&1; then
  printf '\033[1;%dr' "$(_pb_lines)"
fi

end_time=$(date +%s)
elapsed=$(( end_time - start_time ))
echo "Completed in ${elapsed}s"
